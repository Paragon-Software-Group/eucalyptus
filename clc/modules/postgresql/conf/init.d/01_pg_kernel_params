# Copyright 2009-2012 Eucalyptus Systems, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see http://www.gnu.org/licenses/.
#
# Please contact Eucalyptus Systems, Inc., 6755 Hollister Ave., Goleta
# CA 93117, USA or visit http://www.eucalyptus.com/licenses/ if you need
# additional information or have any questions.
#
# This file may incorporate work covered under the following copyright
# and permission notice:
#
#   Software License Agreement (BSD License)
#
#   Copyright (c) 2008, Regents of the University of California
#   All rights reserved.
#
#   Redistribution and use of this software in source and binary forms,
#   with or without modification, are permitted provided that the
#   following conditions are met:
#
#     Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#
#     Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer
#     in the documentation and/or other materials provided with the
#     distribution.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#   FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#   COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#   CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#   LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#   ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE. USERS OF THIS SOFTWARE ACKNOWLEDGE
#   THE POSSIBLE PRESENCE OF OTHER OPEN SOURCE LICENSED MATERIAL,
#   COPYRIGHTED MATERIAL OR PATENTED MATERIAL IN THIS SOFTWARE,
#   AND IF ANY SUCH MATERIAL IS DISCOVERED THE PARTY DISCOVERING
#   IT MAY INFORM DR. RICH WOLSKI AT THE UNIVERSITY OF CALIFORNIA,
#   SANTA BARBARA WHO WILL THEN ASCERTAIN THE MOST APPROPRIATE REMEDY,
#   WHICH IN THE REGENTS' DISCRETION MAY INCLUDE, WITHOUT LIMITATION,
#   REPLACEMENT OF THE CODE SO IDENTIFIED, LICENSING OF THE CODE SO
#   IDENTIFIED, OR WITHDRAWAL OF THE CODE CAPABILITY TO THE EXTENT
#   NEEDED TO COMPLY WITH ANY SUCH LICENSES OR RIGHTS.

is_ignored_file() {
	case "$1" in
		*~ | *.bak | *.dpkg-dist | *.dpkg-new | *.dpkg-old | *.orig | *.rpmnew | *.rpmorig | *.rpmsave )
			return 0
			;;
	esac
	return 1
}

read_sysctl_value() {
	local SYSCTL_VAL_VAR="$1"
	local SYSCTL_VAL_NAME="$2"
	local SYSCTL_VAL_TEMP=""

	SYSCTL_TEMP=$(grep "^[[:space:]]*kernel[./]${SYSCTL_VAL_NAME}[[:space:]]*=[0-9[:space:]]*$" "${SYSCTL_FILE_NAME}" |  sed 's/^.*=[[:space:]]*\b\(.*\)\b[[:space:]]*$/\1/' | tail -1)
	[ -z "${SYSCTL_TEMP}" ] || eval ${SYSCTL_VAL_VAR}=\"${SYSCTL_TEMP}\"
}

read_sysctl_file() {
	local SYSCTL_FILE_NAME="$1"

	is_ignored_file "${SYSCTL_FILE_NAME}"
	if [ ${?} -eq 1 ] && [ -r "${SYSCTL_FILE_NAME}" ] ; then
		read_sysctl_value SYSCTL_SEM sem
		read_sysctl_value SYSCTL_SHMMAX shmmax
		read_sysctl_value SYSCTL_SHMALL shmall
	fi
}

read_sysctl_dir() {
	local SYSCTL_DIR="$1"
	local SYSCTL_DIR_FILE=""
	if [ -d "${SYSCTL_DIR}" ] ; then
		for SYSCTL_DIR_FILE in "${SYSCTL_DIR}"/* ; do
			read_sysctl_file "${SYSCTL_DIR_FILE}"
		done
	fi
}

read_sysctl_values() {
	read_sysctl_dir "/lib/sysctl.d"
	read_sysctl_dir "/usr/lib/sysctl.d"
	read_sysctl_dir "/usr/local/lib/sysctl.d"
	read_sysctl_dir "/run/sysctl.d"
	read_sysctl_dir "/etc/sysctl.d"
	read_sysctl_file "/etc/sysctl.conf"
}

safe_add() {
	local SAFE_ADD_VAR="$1"
	local SAFE_ADD_MAX="$2"
	local SAFE_ADD_VAL1="$3"
	local SAFE_ADD_VAL2="$4"

	if [ ! -z "${SAFE_ADD_VAL1}" ] && [ ! -z "${SAFE_ADD_VAL2}" ] ; then
		local SAFE_ADD_RESULT=$(bc<<<"value = ${SAFE_ADD_VAL1} + ${SAFE_ADD_VAL2}; if ( ${SAFE_ADD_MAX} < value ) ${SAFE_ADD_MAX} else value")
		if [ ! -z "${SAFE_ADD_RESULT}" ] ; then
			eval ${SAFE_ADD_VAR}="${SAFE_ADD_RESULT}"
		fi
	fi
}

safe_max() {
	local SAFE_MAX_VAR="$1"
	local SAFE_MAX_VAL1="$2"
	local SAFE_MAX_VAL2="$3"

	if [ ! -z "${SAFE_MAX_VAL1}" ] && [ ! -z "${SAFE_MAX_VAL2}" ] ; then
		local SAFE_MAX_RESULT=$(bc<<<"if ( ${SAFE_MAX_VAL1} < ${SAFE_MAX_VAL2} ) ${SAFE_MAX_VAL2} else ${SAFE_MAX_VAL1}")
		if [ ! -z "${SAFE_MAX_RESULT}" ] ; then
			eval ${SAFE_MAX_VAR}="${SAFE_MAX_RESULT}"
		fi
	fi
}

calculate_values() {
	# Initialize calculated values to minimums
	local PAGE_SIZE=$(getconf PAGE_SIZE)
	local LONG_BIT=$(getconf LONG_BIT)
	CALC_SEMMNS=10000
	CALC_SEMMNI=1536
	CALC_SHMMAX=536870912
	CALC_SHMALL=$((CALC_SHMMAX / PAGE_SIZE))
	CALC_SEM=""

	local CALC_VAL_SHM_LIMIT="18446744073709551615"
	if [ ${LONG_BIT} -eq 32 ] ; then
		CALC_VAL_SHM_LIMIT=4294967295
	fi

	# If user has specified a (sysctl) value then add to that value
	# NOTE: Values set via rc.local (or any other scripts) are treated as defaults
	if [ ! -z "${SYSCTL_SEM}" ] ; then
		local SYSCTL_SEMARR=(${SYSCTL_SEM})
		if [ ${#SYSCTL_SEMARR[*]} -eq 4 ] ; then
			safe_add CALC_SEMMNS 2147483647 "${SYSCTL_SEMARR[1]}" "${CALC_SEMMNS}"
			safe_add CALC_SEMMNI 2147483647 "${SYSCTL_SEMARR[3]}" "${CALC_SEMMNI}"
		fi
	fi
	safe_max CALC_SHMMAX "${SYSCTL_SHMMAX}" "${CALC_SHMMAX}"
	safe_add CALC_SHMALL "${CALC_VAL_SHM_LIMIT}" "${SYSCTL_SHMALL}" "${CALC_SHMALL}"

	# Use value from /proc if larger
	safe_max CALC_SEMMNS "${PROC_SEMMNS}" "${CALC_SEMMNS}"
	safe_max CALC_SEMMNI "${PROC_SEMMNI}" "${CALC_SEMMNI}"
	safe_max CALC_SHMMAX "${PROC_SHMMAX}" "${CALC_SHMMAX}"
	safe_max CALC_SHMALL "${PROC_SHMALL}" "${CALC_SHMALL}"
	CALC_SEM="${PROC_SEMMSL} ${CALC_SEMMNS} ${PROC_SEMOPM} ${CALC_SEMMNI}"
}

check_kernel_settings() {
	local PROC_SEM=($(</proc/sys/kernel/sem))
	local PROC_SEMMSL=${PROC_SEM[0]}
	local PROC_SEMMNS=${PROC_SEM[1]}
	local PROC_SEMOPM=${PROC_SEM[2]}
	local PROC_SEMMNI=${PROC_SEM[3]}
	local PROC_SHMMAX=$(</proc/sys/kernel/shmmax) 
	local PROC_SHMALL=$(</proc/sys/kernel/shmall)
	local PAGE_SIZE=$(getconf PAGE_SIZE)

	local SYSCTL_SEM=""
	local SYSCTL_SHMMAX=""
	local SYSCTL_SHMALL=""
	read_sysctl_values

	local CALC_SEMMNS=""
	local CALC_SEMMNI=""
	local CALC_SHMMAX=""
	local CALC_SHMALL=""
	local CALC_SEM=""
	calculate_values

	if [ "${PROC_SEMMNS}" != "${CALC_SEMMNS}" ] ||
	   [ "${PROC_SEMMNI}" != "${CALC_SEMMNI}" ] ; then
		echo -n "${CALC_SEM}" > /proc/sys/kernel/sem
	fi
	if [ "${PROC_SHMMAX}" != "${CALC_SHMMAX}" ]; then
		echo -n "${CALC_SHMMAX}" > /proc/sys/kernel/shmmax
	fi
	if [ "${PROC_SHMALL}" != "${CALC_SHMALL}" ]; then
		echo -n "${CALC_SHMALL}" > /proc/sys/kernel/shmall
	fi
}

exit_warn() {
	echo "$1"
	exit 0
}

init_checks() {
	command -v bc &>/dev/null || exit_warn "Required command 'bc' not available, cannot process settings."
}

case "$1" in
	init|start)
		init_checks
		check_kernel_settings
		;;
	dump)
		init_checks
		SYSCTL_SEM=""
		SYSCTL_SHMMAX=""
		SYSCTL_SHMALL=""
		read_sysctl_values
		echo "SYSCTL_SEM=${SYSCTL_SEM}"
		echo "SYSCTL_SHMMAX=${SYSCTL_SHMMAX}"
		echo "SYSCTL_SHMALL=${SYSCTL_SHMALL}"

		PROC_SEM=($(</proc/sys/kernel/sem))
		PROC_SEMMSL=${PROC_SEM[0]}
		PROC_SEMMNS=${PROC_SEM[1]}
		PROC_SEMOPM=${PROC_SEM[2]}
		PROC_SEMMNI=${PROC_SEM[3]}
		PROC_SHMMAX=$(</proc/sys/kernel/shmmax)
		PROC_SHMALL=$(</proc/sys/kernel/shmall)
		echo "PROC_SEM=${PROC_SEM[*]}"
		echo "PROC_SHMMAX=${PROC_SHMMAX}"
		echo "PROC_SHMALL=${PROC_SHMALL}"

		calculate_values
		echo "CALC_SEM=${CALC_SEM}"
		echo "CALC_SHMMAX=${CALC_SHMMAX}"
		echo "CALC_SHMALL=${CALC_SHMALL}"
		;;
esac
