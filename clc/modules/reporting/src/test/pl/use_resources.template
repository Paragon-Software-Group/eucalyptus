#!/usr/bin/perl

# Copyright 2009-2012 Eucalyptus Systems, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see http://www.gnu.org/licenses/.
#
# Please contact Eucalyptus Systems, Inc., 6755 Hollister Ave., Goleta
# CA 93117, USA or visit http://www.eucalyptus.com/licenses/ if you need
# additional information or have any questions.
#
# This file may incorporate work covered under the following copyright
# and permission notice:
#
#   Software License Agreement (BSD License)
#
#   Copyright (c) 2008, Regents of the University of California
#   All rights reserved.
#
#   Redistribution and use of this software in source and binary forms,
#   with or without modification, are permitted provided that the
#   following conditions are met:
#
#     Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#
#     Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer
#     in the documentation and/or other materials provided with the
#     distribution.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#   FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#   COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#   CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#   LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#   ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE. USERS OF THIS SOFTWARE ACKNOWLEDGE
#   THE POSSIBLE PRESENCE OF OTHER OPEN SOURCE LICENSED MATERIAL,
#   COPYRIGHTED MATERIAL OR PATENTED MATERIAL IN THIS SOFTWARE,
#   AND IF ANY SUCH MATERIAL IS DISCOVERED THE PARTY DISCOVERING
#   IT MAY INFORM DR. RICH WOLSKI AT THE UNIVERSITY OF CALIFORNIA,
#   SANTA BARBARA WHO WILL THEN ASCERTAIN THE MOST APPROPRIATE REMEDY,
#   WHICH IN THE REGENTS' DISCRETION MAY INCLUDE, WITHOUT LIMITATION,
#   REPLACEMENT OF THE CODE SO IDENTIFIED, LICENSING OF THE CODE SO
#   IDENTIFIED, OR WITHDRAWAL OF THE CODE CAPABILITY TO THE EXTENT
#   NEEDED TO COMPLY WITH ANY SUCH LICENSES OR RIGHTS.

# use_resources.template is a template used to generate a perl file which is then inserted
#  into a bundled image. The generated perl file is then executed from within the instance
#  upon startup. The generated perl script writes random data to the local disk and to a
#  mounted EBS volume, from within a running instance, in order to simulate resource usage
#  for that instance. The reason we use a template is to allow the test suite to modify the
#  amount of resources the perl script will use, by overwriting the constants near the top
#  of this file.
#
# This template is converted into a perl file using the fill_template.pl script.

use warnings;
use strict;

my $pid = fork();
exit(0) if ($pid != 0);

# These values are automatically replaced by the templating mechanism
my $interval = [INTERVAL];
my $io_megs = [IO_MEGS];
my $device = "[DEVICE]"; # should be /dev/sda1 or something similar
my $sleep_duration = [SLEEP_DURATION];
my $filename = "";

sub write_random_file($$);

# Wait for EBS vols to show up, then mount volume
print "startup sleep:$sleep_duration\n";
sleep $sleep_duration;
mkdir("/mnt/volume");
system("mount $device /mnt/volume") or die("couldn't mount $device");

# Periodically use local disk and ebs volume to simulate reporting usage
my $start_time = 0;
while (1) {
	$start_time = time();
	$filename = "dummy_file_" . time();
	write_random_file("/tmp/$filename", $io_megs);
	write_random_file("/mnt/volume/$filename", $io_megs);
	print "sleep:" . ($interval-(time()-$start_time)) . "\n";
	sleep(($interval-(time()-$start_time)));
}

sub write_random_file($$) {
	my ($filename, $size_megs) = @_;
	my @chars = ('a'..'z','A'..'Z',0..9);
	open (FILE, ">$filename") or die("couldn't open $filename");
	for (my $i=0; $i<($size_megs<<20);$i++) {
		print FILE $chars[int(rand($#chars))];
	}
	close (FILE) or die("couldn't close $filename");
	system("rm $filename") or die("couldn't remove $filename");
	print "wrote $size_megs\n";
}

